<pre>
  LIP: 1
  Title: LIP process
  Author: Rene Pickhardt <rene@rene-pickhardt.de>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/renepickhardt/lips/wiki/Comments:LIP-0001
  Status: Draft
  Type: Process
  Created: 2018-07-21
  License: BSD-2-Clause
           OPL
</pre>

==Abstract==

Lightning Network Improvement Proposal (LIP) is a design document providing information to the Lightning Network and Bitcoin community, or describing a new feature for the Lightning Network or its processes or environment. The LIP should provide a concise technical specification of the feature and a rationale for the feature.

We intend LIPs to be the primary mechanisms for proposing new features for the BOLT standard, for collecting community input on an issue, and for documenting the design decisions that have gone into the Lightning Network. The LIP author is responsible for building consensus within the community and documenting dissenting opinions.

Because the LIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.

==Copyright==

This LIP is dual-licensed under the Open Publication License and BSD 2-clause license.

==LIP workflow==

The LIP process begins with a new idea for the Lighting Network. Each potential LIP must have a champion -- someone who writes the LIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The LIP champion (a.k.a. Author) should first attempt to ascertain whether the idea is LIP-able.
Small enhancements or patches to a particular piece of software often don't require standardisation between multiple projects; these don't need a LIP and should be injected into the relevant project-specific development workflow with a patch submission to the applicable issue tracker.
Additionally, ideas might have been brought forward for changing the Lighting Network that have been rejected for various reasons.
The first step should be to search past discussions to see if an idea has been considered before, and if so, what issues arose in its progression.
After investigating past work, the best way to proceed is by posting about the new idea to the [https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev Lightning Network development mailing list].

Vetting an idea publicly before going as far as writing a LIP is meant to save both the potential author and the wider community time.
Asking the Lightning Network community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the internet does not always do the trick).
It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where the Lightning Network is used.

Once the champion has asked the Lightning Network community as to whether an idea has any chance of acceptance, a draft LIP should be presented to the [https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev Lightning Network development mailing list].
This gives the author a chance to flesh out the draft LIP to make it properly formatted, of high quality, and to address additional concerns about the proposal.
Following a discussion, the proposal should be submitted to the [https://github.com/lightning/lips LIPs git repository] as a pull request (as long as that repository does not exist [https://github.com/renepickhardt/lips this one] should be used).
This draft must be written in LIP style as described below, and named with an alias such as "lip-johndoe-trustfulcustodiannetwork" until the editor has assigned it a LIP number (authors MUST NOT self-assign LIP numbers).

LIP authors are responsible for collecting community feedback on both the initial idea and the LIP before submitting it for review. However, wherever possible, long open-ended discussions on public mailing lists should be avoided. Strategies to keep the discussions efficient include: setting up a separate SIG mailing list for the topic, having the LIP author accept private comments in the early design phases, setting up a wiki page or git repository, etc. LIP authors should use their discretion here.

It is highly recommended that a single LIP contain a single key proposal or new idea. The more focused the LIP, the more successful it tends to be. If in doubt, split your LIP into several well-focused ones.

When the LIP draft is complete, the LIP editor will assign the LIP a number, label it as Standards Track, Informational, or Process, and merge the pull request to the LIPs git repository.
The LIP editor will not unreasonably reject a LIP.
Reasons for rejecting LIPs include duplication of effort, disregard for formatting rules, being too unfocused or too broad, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the philosophy of the Lightning Network and Bitcoin.
For a LIP to be accepted it must meet certain minimum criteria.
It must be a clear and complete description of the proposed enhancement.
The enhancement must represent a net improvement.
The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.

The LIP author may update the draft as necessary in the git repository. Updates to drafts should also be submitted by the author as pull requests.

===Transferring LIP Ownership===

It occasionally becomes necessary to transfer ownership of LIPs to a new champion. In general, we'd like to retain the original author as a co-author of the transferred LIP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the LIP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the LIP. We try to build consensus around a LIP, but if that's not possible, you can always submit a competing LIP.

If you are interested in assuming ownership of a LIP, send a message asking to take over, addressed to both the original author and the LIP editor. If the original author doesn't respond to email in a timely manner, the LIP editor will make a unilateral decision (it's not like such decisions can't be reversed :).

===LIP Editors===

TODO: (elect LIP editor) The current LIP editor is to be elected and Rene Pickhardt is taking over the position as long as it has not been filled. Rene Pickhardt can be contacted at [[mailto:rene@rene-pickhardt.de|rene@rene-pickhardt.de]].

===LIP Editor Responsibilities & Workflow===

The LIP editor subscribes to the Lightning-dev mailing list.
Off-list LIP-related correspondence should be sent (or CC'd) to rene@rene-pickhardt.de.

For each new LIP that comes in an editor does the following:

* Read the LIP to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted.
* The title should accurately describe the content.
* The LIP draft must have been sent to the Lightning Network development mailing list for discussion.
* Motivation and backward compatibility (when applicable) must be addressed.
* The defined Layer header must be correctly assigned for the given specification.
* Licensing terms must be acceptable for LIPs.

If the LIP isn't ready, the editor will send it back to the author for revision, with specific instructions.

Once the LIP is ready for the repository it should be submitted as a "pull request" to the [https://github.com/renepickhardt/lips LIPs git repository] where it may get further feedback.

The LIP editor will:

* Assign a LIP number in the pull request.

* Merge the pull request when it is ready.

* List the LIP in [[README.mediawiki]]

The LIP editors are intended to fulfill administrative and editorial responsibilities. The LIP editors monitor LIP changes, and update LIP headers as appropriate.

==LIP format and structure==

===Specification===

LIPs should be written in mediawiki format.

Each LIP should have the following parts:

* Preamble -- Headers containing metadata about the LIP ([[#LIP header preamble|see below]]).

* Abstract -- A short (~200 word) description of the technical issue being addressed.

* Copyright -- The LIP must be explicitly licensed under acceptable copyright terms ([[#LIP licensing|see below]]).

* Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Lighnting Network clients.

* Motivation -- The motivation is critical for LIPs that want to change BOLT. It should clearly explain why the existing protocol is inadequate to address the problem that the LIP solves.

* Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work. The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.

* Backwards compatibility -- All LIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The LIP must explain how the author proposes to deal with these incompatibilities.

* Reference implementation -- The reference implementation must be completed before any LIP is given status "Final", but it need not be completed before the LIP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code. The final implementation must include test code and documentation appropriate for BOLT.

====LIP header preamble====

Each LIP must begin with an RFC 822 style header preamble. The headers must appear in the following order. Headers marked with "*" are optional and are described below. All other headers are required.

<pre>
  LIP: <LIP number, or "?" before being assigned>
* Layer: <BOLT | Peer Services | API/RPC | Applications>
  Title: <LIP title; maximum 44 characters>
  Author: <list of authors' real names and email addrs>
* Discussions-To: <email address>
* Comments-Summary: <summary tone>
  Comments-URI: <links to wiki page for comments>
  Status: <Draft | Active | Proposed | Deferred | Rejected |
           Withdrawn | Final | Replaced | Obsolete>
  Type: <Standards Track | Informational | Process>
  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
  License: <abbreviation for approved license(s)>
* License-Code: <abbreviation for code under different approved license(s)>
* Post-History: <dates of postings to bitcoin mailing list, or link to thread in mailing list archive>
* Requires: <LIP number(s)>
* Replaces: <LIP number>
* Superseded-By: <LIP number>
</pre>

The Layer header (only for Standards Track LIPs) documents which layer of the Lightning Network the LIP applies to.
(There should be a discussion about the currently proposed layers before this LIP will be accepted)

The Author header lists the names and email addresses of all the authors/owners of the LIP.
The format of the Author header value must be

  Random J. User <address@dom.ain>

If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.

While a LIP is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the LIP is being discussed. No Discussions-To header is necessary if the LIP is being discussed privately with the author, or on the bitcoin email mailing lists.

The Type header specifies the type of LIP: Standards Track, Informational, or Process.

The Created header records the date that the LIP was assigned a number, while Post-History is used to record when new versions of the LIP are posted to bitcoin mailing lists.
Dates should be in yyyy-mm-dd format, e.g. 2001-08-14.
Post-History is permitted to be a link to a specific thread in a mailing list archive.

LIPs may have a Requires header, indicating the LIP numbers that this LIP depends on.

LIPs may also have a Superseded-By header indicating that a LIP has been rendered obsolete by a later document; the value is the number of the LIP that replaces the current document. The newer LIP must have a Replaces header containing the number of the LIP that it rendered obsolete.

====Auxiliary Files====

LIPs may include auxiliary files such as diagrams. Auxiliary files should be included in a subdirectory for that LIP, or must be named LIP-XXXX-Y.ext, where "XXXX" is the LIP number, "Y" is a serial number (starting at 1), and "ext" is replaced by the actual file extension (e.g. "png").

==LIP types==

There are three kinds of LIP:

* A Standards Track LIP describes any change that affects most or all Lightning Network implementations, such as a change to the network protocol, a change to BOLT, or any change or addition that affects the interoperability of applications using the Lightning Network. Standards Track LIPs consist of two parts, a design document and a reference implementation.
* An Informational LIP describes a design issues of the Lightning Network, or provides general guidelines or information to the Lightning Network community, but does not propose a new feature. Informational LIPs do not necessarily represent a Lightning Network community consensus or recommendation, so users and implementors are free to ignore Informational LIPs or follow their advice.
* A Process LIP describes a process surrounding the Lightning Network, or proposes a change to (or an event in) a process. Process LIPs are like Standards Track LIPs but apply to areas other than BOLT itself. They may propose an implementation, but not to the codebase of implementations; they often require community consensus; unlike Informational LIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in the development of the Lightning Network. Any meta-LIP is also considered a Process LIP.

==LIP status field==

===Specification===

The typical paths of the status of LIPs are as follows:

<img src="LIP-0001/process.png"></img>

Champions of a LIP may decide on their own to change the status between Draft, Deferred, or Withdrawn.
The LIP editor may also change the status to Deferred when no progress is being made on the LIP.

A LIP may only change status from Draft (or Rejected) to Proposed, when the author deems it is complete, has a working implementation (where applicable), and has community plans to progress it to the Final status.

LIPs should be changed from Draft or Proposed status, to Rejected status, upon request by any person, if they have not made progress in three years. Such a LIP may be changed to Draft status if the champion provides revisions that meaningfully address public criticism of the proposal, or to Proposed status if it meets the criteria required as described in the previous paragraph.

An Proposed LIP may progress to Final only when specific criteria reflecting real-world adoption has occurred. This is different for each LIP depending on the nature of its proposed changes, which will be expanded on below. Evaluation of this status change should be objectively verifiable, and/or be discussed on the development mailing list.

When a Final LIP is no longer relevant, its status may be changed to Replaced or Obsolete (which is equivalent to Replaced). This change must also be objectively verifiable and/or discussed.

A process LIP may change status from Draft to Active when it achieves rough consensus on the mailing list. Such a proposal is said to have rough consensus if it has been open to discussion on the development mailing list for at least one month, and no person maintains any unaddressed substantiated objections to it. Addressed or obstructive objections may be ignored/overruled by general agreement that they have been sufficiently addressed, but clear reasoning must be given in such circumstances.

====Progression to Final status====

: We need a reasonable process to vote on BOLT related changes by lightning network nodes. 

Peer services LIPs should be observed to be adopted by at least 1% of public listening nodes for one month.

API/RPC and application layer LIPs must be implemented by at least two independent and compatible software applications.

Software authors are encouraged to publish summaries of what LIPs their software supports to aid in verification of status changes. Good examples of this at the time of writing this LIP, can be observed in Bitcoin related projects like [https://github.com/bitcoin/bitcoin/blob/master/doc/BIPs.md Bitcoin Core's doc/BIP.md file] as well as [https://github.com/bitcoin-wallet/bitcoin-wallet/blob/master/wallet/README.specs.md Bitcoin Wallet for Android's wallet/README.specs.md file].

These criteria are considered objective ways to observe the de facto adoption of the LIP, and are not to be used as reasons to oppose or reject a LIP. Should a LIP become actually and unambiguously adopted despite not meeting the criteria outlined here, it should still be updated to Final status.

===Rationale===

Why is this necessary at all?

TODO: Depends on the consensus finding process.

What is the ideal percentage of listening nodes needed to adopt peer services proposals?

* This is unknown, and set rather arbitrarily at this time. For a random selection of peers to have at least one other peer implementing the extension, 13% or more would be necessary, but nodes could continue to scan the network for such peers with perhaps some reasonable success. Furthermore, service bits exist to help identification upfront.

Why is it necessary for at least two software projects to release an implementation of API/RPC and application layer LIPs, before they become Final?

* If there is only one implementation of a specification, there is no other program for which a standard interface is used with or needed.
* Even if there are only two projects rather than more, some standard coordination between them exists.

What if a LIP is proposed that only makes sense for a single specific project?

* The LIP process exists for standardisation between independent projects. If something only affects one project, it should be done through that project's own internal processes, and never be proposed as a LIP in the first place.

==LIP comments==

===Specification===

Each LIP should, in its preamble, link to a public wiki page with a summary tone of the comments on that page.
Reviewers of the LIP who consider themselves qualified, should post their own comments on this wiki page.
The comments page should generally only be used to post final comments for a completed LIP.
If a LIP is not yet completed, reviewers should instead post on the applicable development mailing list thread to allow the LIP author(s) to address any concerns or problems pointed out by the review.

Some LIPs receive exposure outside the development community prior to completion, and other LIPs might not be completed at all. To avoid a situation where critical LIP reviews may go unnoticed during this period, reviewers may, at their option, still post their review on the comments page, provided they first post it to the mailing list and plan to later remove or revise it as applicable based on the completed version. Such revisions should be made by editing the previous review and updating the timestamp. Reviews made prior to the complete version may be removed if they are no longer applicable and have not been updated in a timely manner (eg, within one month).

Pages must be named after the full LIP number (eg, "LIP 0001") and placed in the "Comments" namespace.
TODO: (change url) For example, the link for LIP 1 will be https://github.com/renepickhardt/lips/wiki/Comments:LIP-0001 .

Comments posted to this wiki should use the following format:

    <Your opinion> --<Your name>, <Date of posting, as YYYY-MM-DD>

LIPs may also choose to list a second forum for LIP comments, in addition to the LIPs wiki.
In this case, the second forum's URI should be listed below the primary wiki's URI.

After some time, the LIP itself may be updated with a summary tone of the comments.
Summary tones may be chosen from the following, but this LIP does not intend to cover all possible nuances and other summaries may be used as needed:

* No comments yet.
* Unanimously Recommended for implementation
* Unanimously Discourage for implementation
* Mostly Recommended for implementation, with some Discouragement
* Mostly Discouraged for implementation, with some Recommendation

For example, the preamble to LIP 1 might be updated to include the line:

    Comments-Summary: No comments yet.
    Comments-URI: https://github.com/renepickhardt/lips/wiki/Comments:LIP-0001
                  https://some-other-wiki.org/LIP_1_Comments

These fields must follow the "Discussions-To" header defined in LIP 1 (if that header is not present, it should follow the position where it would be present; generally this is immediately above the Status header).

To avoid doubt: comments and status are unrelated metrics to judge a LIP, and neither should be directly influencing the other.

===Rationale===

What is the purpose of LIP comments?

* Various LIPs have been adopted (the criteria required for "Final" Status) despite being considered generally inadvisable. Some presently regard LIPs as a "good idea" simply by virtue of them being assigned a LIP number. Due to the low barrier of entry for submission of new LIPs, it seems advisable for a way for reviewers to express their opinions on them in a way that is consumable to the public without needing to review the entire development discussion.

Will LIP comments be censored or limited to particular participants/"experts"?

* Participants should freely refrain from commenting outside of their area of knowledge or expertise. However, comments should not be censored, and participation should be open to the public.

==LIP licensing==

===Specification===

New LIPs may be accepted with the following licenses. Each new LIP must identify at least one acceptable license in its preamble. The License header in the preamble must be placed after the Created header. Each license must be referenced by their respective abbreviation given below.

For example, a preamble might include the following License header:

    License: BSD-2-Clause
             GNU-All-Permissive

In this case, the LIP text is fully licensed under both the OSI-approved BSD 2-clause license as well as the GNU All-Permissive License, and anyone may modify and redistribute the text provided they comply with the terms of *either* license. In other words, the license list is an "OR choice", not an "AND also" requirement.

It is also possible to license source code differently from the LIP text. A optional License-Code header is placed after the License header. Again, each license must be referenced by their respective abbreviation given below.

For example, a preamble specifying the optional License-Code header might look like:

    License: BSD-2-Clause
             GNU-All-Permissive
    License-Code: GPL-2.0+

In this case, the code in the LIP is not available under the BSD or All-Permissive licenses, but only under the terms of the GNU General Public License (GPL), version 2 or newer.
If the code were to be available under *only* version 2 exactly, the "+" symbol should be removed from the license abbreviation.
For a later version (eg, GPL 3.0), you would increase the version number (and retain or remove the "+" depending on intent).

    License-Code: GPL-2.0   # This refers to GPL v2.0 *only*, no later license versions are acceptable.
    License-Code: GPL-2.0+  # This refers to GPL v2.0 *or later*.
    License-Code: GPL-3.0   # This refers to GPL v3.0 *only*, no later license versions are acceptable.
    License-Code: GPL-3.0+  # This refers to GPL v3.0 *or later*.

In the event that the licensing for the text or code is too complicated to express with a simple list of alternatives, the list should instead be replaced with the single term "Complex". In all cases, details of the licensing terms must be provided in the Copyright section of the LIP.

LIPs are not required to be *exclusively* licensed under approved terms, and may also be licensed under unacceptable licenses *in addition to* at least one acceptable license.
In this case, only the acceptable license(s) should be listed in the License and License-Code headers.

====Recommended licenses====

* BSD-2-Clause: [https://opensource.org/licenses/BSD-2-Clause OSI-approved BSD 2-clause license]
* BSD-3-Clause: [https://opensource.org/licenses/BSD-3-Clause OSI-approved BSD 3-clause license]
* CC0-1.0: [https://creativecommons.org/publicdomain/zero/1.0/ Creative Commons CC0 1.0 Universal]
* GNU-All-Permissive: [http://www.gnu.org/prep/maintain/html_node/License-Notices-for-Other-Files.html GNU All-Permissive License]

In addition, it is recommended that literal code included in the LIP be dual-licensed under the same license terms as the project it modifies. For example, literal code intended for c-lightning would ideally be dual-licensed under the BSD-MIT license terms as well as one of the above with the rest of the LIP text.

====Not recommended, but acceptable licenses====

* Apache-2.0: [http://www.apache.org/licenses/LICENSE-2.0 Apache License, version 2.0]
* BSL-1.0: [http://www.boost.org/LICENSE_1_0.txt Boost Software License, version 1.0]
* CC-BY-4.0: [https://creativecommons.org/licenses/by/4.0/ Creative Commons Attribution 4.0 International]
* CC-BY-SA-4.0: [https://creativecommons.org/licenses/by-sa/4.0/ Creative Commons Attribution-ShareAlike 4.0 International]
* MIT: [https://opensource.org/licenses/MIT Expat/MIT/X11 license]
* AGPL-3.0+: [http://www.gnu.org/licenses/agpl-3.0.en.html GNU Affero General Public License (AGPL), version 3 or newer]
* FDL-1.3: [http://www.gnu.org/licenses/fdl-1.3.en.html GNU Free Documentation License, version 1.3]
* GPL-2.0+: [http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html GNU General Public License (GPL), version 2 or newer]
* LGPL-2.1+: [http://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html GNU Lesser General Public License (LGPL), version 2.1 or newer]

====Not acceptable licenses====

All licenses not explicitly included in the above lists are not acceptable terms for a Lightning Improvement Proposal unless a later LIP extends this one to add them.

===Rationale===

Why are there software licenses included?

* Some LIPs, especially consensus layer, may include literal code in the LIP itself which may not be available under the exact license terms of the LIP.
* Despite this, not all software licenses would be acceptable for content included in LIPs.

Why is Public Domain no longer acceptable for new LIPs?

* In some jurisdictions, public domain is not recognised as a legitimate legal action, leaving the LIP simply copyrighted with no redistribution or modification allowed at all.

==Changes from BIP2 ==

* License are a little clener
* Consensus machanisms for BOLT

== History ==
This document was derived heavily from Bitcoin's BIP-0002 (which was an improvement of BIP-0001 which was basically derived from PEP-0001). In many places text was simply copied and modified. Although the BIP-0002 text was written by Luke Dashjr, MarcoFalke, Jonathan Cross they are not responsible for its use in the Lightning Network Improvement Process, and should not be bothered with technical questions specific to the Lightning Network or the LIP process. Please direct all comments to the LIP editors or the Lightning Network development mailing list.



==See Also==
* [https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki|BIP 2: BIP Purpose and Guidelines]]
* [https://tools.ietf.org/html/rfc7282 RFC 7282: On Consensus and Humming in the IETF]
